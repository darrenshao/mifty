[host] 2016-05-17 13:40:46.370 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExamplekey
[host] 2016-05-17 13:41:26.345 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExamplekey
[host] 2016-05-17 13:41:56.503 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExamplekey
[host] 2016-05-17 13:46:34.969 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExamplekey
[host] 2016-05-17 13:46:35.102 [0ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:88) echo: {"sign":"2064CE40B323B1D919C834A8771F5C94","params":{"hello":"Good morning!","name":"Darren"}}
[host] 2016-05-17 13:46:35.148 [46ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 13:46:35.163 [61ms] [ERROR] [main] com.shc.crossing.specs.CrossingService.parseInputParams(CrossingService.java:175) Signature not matched[SRC sign: 2064CE40B323B1D919C834A8771F5C94, DST sign: 394F189E2B10623217EC2F543437A4C1].
[host] 2016-05-17 13:46:35.177 [208ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExamplekey
[host] 2016-05-17 13:46:35.414 [312ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:41) sayHello: {"encrypted":"ubUVRZ7gfuSKZvz4YAltTEP+C6qiuAZ1EUjN3yTNsPIlU1KcNPBJYYEGS8EjHpoi87UF6DuzniEDzDWBQTj6BSHOJKF7i4SPv6Z6JPhgfHSrmg92+jHQajTACZbx06uq"}
[host] 2016-05-17 13:46:35.641 [539ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 13:46:35.642 [540ms] [ERROR] [main] com.shc.crossing.specs.CrossingService.parseInputParams(CrossingService.java:175) Signature not matched[SRC sign: 2064CE40B323B1D919C834A8771F5C94, DST sign: 394F189E2B10623217EC2F543437A4C1].
[host] 2016-05-17 13:47:42.307 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExamplekey
[host] 2016-05-17 13:47:42.335 [67233ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:88) echo: {"sign":"2064CE40B323B1D919C834A8771F5C94","params":{"hello":"Good morning!","name":"Darren"}}
[host] 2016-05-17 13:47:42.336 [67234ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 13:47:42.336 [67234ms] [ERROR] [main] com.shc.crossing.specs.CrossingService.parseInputParams(CrossingService.java:175) Signature not matched[SRC sign: 2064CE40B323B1D919C834A8771F5C94, DST sign: 394F189E2B10623217EC2F543437A4C1].
[host] 2016-05-17 13:47:42.340 [33ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExamplekey
[host] 2016-05-17 13:47:42.590 [67488ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:41) sayHello: {"encrypted":"ubUVRZ7gfuSKZvz4YAltTEP+C6qiuAZ1EUjN3yTNsPIlU1KcNPBJYYEGS8EjHpoi87UF6DuzniEDzDWBQTj6BSHOJKF7i4SPv6Z6JPhgfHSrmg92+jHQajTACZbx06uq"}
[host] 2016-05-17 13:47:42.592 [67490ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 13:47:42.592 [67490ms] [ERROR] [main] com.shc.crossing.specs.CrossingService.parseInputParams(CrossingService.java:175) Signature not matched[SRC sign: 2064CE40B323B1D919C834A8771F5C94, DST sign: 394F189E2B10623217EC2F543437A4C1].
[host] 2016-05-17 13:54:48.811 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExamplekey
[host] 2016-05-17 13:54:48.933 [0ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:88) echo: {"sign":"2064CE40B323B1D919C834A8771F5C94","params":{"hello":"Good morning!","name":"Darren"}}
[host] 2016-05-17 13:54:48.981 [48ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 13:54:48.996 [63ms] [ERROR] [main] com.shc.crossing.specs.CrossingService.parseInputParams(CrossingService.java:175) Signature not matched[SRC sign: 2064CE40B323B1D919C834A8771F5C94, DST sign: 394F189E2B10623217EC2F543437A4C1].
[host] 2016-05-17 13:57:16.170 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 13:57:16.204 [147271ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:88) echo: {"sign":"394F189E2B10623217EC2F543437A4C1","params":{"hello":"Good morning!","name":"Darren"}}
[host] 2016-05-17 13:57:16.205 [147272ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 13:57:16.206 [147273ms] [ERROR] [main] com.shc.crossing.specs.CrossingService.getParamAsString(CrossingService.java:300) Missing parameter: echo
[host] 2016-05-17 13:58:19.351 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"echo":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 13:58:19.380 [210447ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:88) echo: {"sign":"FD38C3F0543A4D7C69747ECFCBF19593","params":{"echo":"Good morning!","name":"Darren"}}
[host] 2016-05-17 13:58:19.380 [210447ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"echo":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 13:58:19.381 [210448ms] [INFO] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:111) 
name: Darren
say: Good morning!
[host] 2016-05-17 13:58:19.382 [210449ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,Good morning!"} signKey: miftyExampleKey
[host] 2016-05-17 13:58:19.383 [210450ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:126) sayHello: {"sign":"40659C82500B4930764CD2C22CBF2BB3","params":{"sentence":"Hi, Darren ,Good morning!"},"errorCode":0,"errorInfo":"Success"}
[host] 2016-05-17 13:58:19.388 [37ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 13:58:19.651 [210718ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:41) sayHello: {"encrypted":"ubUVRZ7gfuScyBl/cKNvZ4mU79L5s0fMPlLTwIrhAvbQhV81QuWz42JN6uzyqXrT87UF6DuzniEDzDWBQTj6BSHOJKF7i4SPv6Z6JPhgfHSrmg92+jHQajTACZbx06uq"}
[host] 2016-05-17 13:58:19.894 [210961ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 13:58:19.895 [210962ms] [INFO] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:64) 
name: Darren
say: Good morning!
[host] 2016-05-17 13:58:19.895 [210962ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,Good morning!"} signKey: miftyExampleKey
[host] 2016-05-17 13:58:19.896 [210963ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:79) sayHello: {"encrypted":"ubUVRZ7gfuRI6GxgNpVEw1nnmwy+J9bbuis4kCz+XvQ/VjGKv3wcxNoiSahhy0dw/Net8Oc5aaE0VFQZDkZ+1cfp7ZuKpo1PauVSt7tVmInUH1EwxOoLKPKRArKRUr/l","errorCode":0,"errorInfo":"Success"}
[host] 2016-05-17 14:01:01.056 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"echo":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:01.094 [372161ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:88) echo: {"sign":"FD38C3F0543A4D7C69747ECFCBF19593","params":{"echo":"Good morning!","name":"Darren"}}
[host] 2016-05-17 14:01:01.095 [372162ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"echo":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:01.096 [372163ms] [INFO] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:111) 
name: Darren
say: Good morning!
[host] 2016-05-17 14:01:01.096 [372163ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,Good morning!"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:01.097 [372164ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:126) sayHello: {"sign":"40659C82500B4930764CD2C22CBF2BB3","params":{"sentence":"Hi, Darren ,Good morning!"},"errorCode":0,"errorInfo":"Success"}
[host] 2016-05-17 14:01:01.102 [46ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:01.382 [372449ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:41) sayHello: {"encrypted":"ubUVRZ7gfuScyBl/cKNvZ4mU79L5s0fMPlLTwIrhAvbQhV81QuWz42JN6uzyqXrT87UF6DuzniEDzDWBQTj6BSHOJKF7i4SPv6Z6JPhgfHSrmg92+jHQajTACZbx06uq"}
[host] 2016-05-17 14:01:01.384 [372451ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:01.385 [372452ms] [INFO] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:64) 
name: Darren
say: Good morning!
[host] 2016-05-17 14:01:01.385 [372452ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,Good morning!"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:01.387 [372454ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:79) sayHello: {"encrypted":"ubUVRZ7gfuRI6GxgNpVEw1nnmwy+J9bbuis4kCz+XvQ/VjGKv3wcxNoiSahhy0dw/Net8Oc5aaE0VFQZDkZ+1cfp7ZuKpo1PauVSt7tVmInUH1EwxOoLKPKRArKRUr/l","errorCode":0,"errorInfo":"Success"}
[host] 2016-05-17 14:01:26.812 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:26.844 [397911ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:88) echo: {"sign":"E00192D3EF9539AD4C3A634064FEC575","params":{"echo":"How are you!","name":"Darren"}}
[host] 2016-05-17 14:01:26.844 [397911ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:26.845 [397912ms] [INFO] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:111) 
name: Darren
say: How are you!
[host] 2016-05-17 14:01:26.846 [397913ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,How are you!"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:26.847 [397914ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:126) sayHello: {"sign":"23E7A98AFE424ADA0A8DC2D32AC71230","params":{"sentence":"Hi, Darren ,How are you!"},"errorCode":0,"errorInfo":"Success"}
[host] 2016-05-17 14:01:26.851 [39ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:27.097 [398164ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:41) sayHello: {"encrypted":"ubUVRZ7gfuScyBl/cKNvZ4mU79L5s0fMPlLTwIrhAvbQhV81QuWz42JN6uzyqXrT87UF6DuzniEDzDWBQTj6BSHOJKF7i4SPv6Z6JPhgfHSrmg92+jHQajTACZbx06uq"}
[host] 2016-05-17 14:01:27.100 [398167ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:27.101 [398168ms] [INFO] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:64) 
name: Darren
say: Good morning!
[host] 2016-05-17 14:01:27.101 [398168ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,Good morning!"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:27.103 [398170ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:79) sayHello: {"encrypted":"ubUVRZ7gfuRI6GxgNpVEw1nnmwy+J9bbuis4kCz+XvQ/VjGKv3wcxNoiSahhy0dw/Net8Oc5aaE0VFQZDkZ+1cfp7ZuKpo1PauVSt7tVmInUH1EwxOoLKPKRArKRUr/l","errorCode":0,"errorInfo":"Success"}
[host] 2016-05-17 14:01:37.026 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:37.058 [408125ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:88) echo: {"sign":"E00192D3EF9539AD4C3A634064FEC575","params":{"echo":"How are you!","name":"Darren"}}
[host] 2016-05-17 14:01:37.058 [408125ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:37.059 [408126ms] [INFO] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:111) 
name: Darren
say: How are you!
[host] 2016-05-17 14:01:37.059 [408126ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,How are you!"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:37.060 [408127ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:126) sayHello: {"sign":"23E7A98AFE424ADA0A8DC2D32AC71230","params":{"sentence":"Hi, Darren ,How are you!"},"errorCode":0,"errorInfo":"Success"}
[host] 2016-05-17 14:01:37.063 [37ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:37.317 [408384ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:41) sayHello: {"encrypted":"ubUVRZ7gfuScyBl/cKNvZ4mU79L5s0fMPlLTwIrhAvbQhV81QuWz42JN6uzyqXrT87UF6DuzniEDzDWBQTj6BSHOJKF7i4SPv6Z6JPhgfHSrmg92+jHQajTACZbx06uq"}
[host] 2016-05-17 14:01:37.318 [408385ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:37.319 [408386ms] [INFO] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:64) 
name: Darren
say: Good morning!
[host] 2016-05-17 14:01:37.319 [408386ms] [DEBUG] [main] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,Good morning!"} signKey: miftyExampleKey
[host] 2016-05-17 14:01:37.321 [408388ms] [DEBUG] [main] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:79) sayHello: {"encrypted":"ubUVRZ7gfuRI6GxgNpVEw1nnmwy+J9bbuis4kCz+XvQ/VjGKv3wcxNoiSahhy0dw/Net8Oc5aaE0VFQZDkZ+1cfp7ZuKpo1PauVSt7tVmInUH1EwxOoLKPKRArKRUr/l","errorCode":0,"errorInfo":"Success"}
[host] 2016-05-17 14:48:52.506 [0ms] [DEBUG] [main] com.shc.crossing.wizard.Wizard.init(Wizard.java:36) Initializing ConfigWizard.
[host] 2016-05-17 14:48:52.516 [10ms] [DEBUG] [main] com.shc.crossing.config.Config.loadConfig(Config.java:64) loading AclConfig
[host] 2016-05-17 14:48:52.597 [91ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:449) ConfigurationUtils.locate(): base is null, name is conf/acl.xml
[host] 2016-05-17 14:48:52.600 [94ms] [DEBUG] [main] org.apache.commons.configuration.DefaultFileSystem.locateFromURL(DefaultFileSystem.java:281) Could not locate file conf/acl.xml at null: no protocol: conf/acl.xml
[host] 2016-05-17 14:48:52.618 [112ms] [ERROR] [main] com.shc.crossing.log.MyLog.printStackTrace(MyLog.java:46) org.apache.commons.configuration.ConfigurationException: Cannot locate configuration source conf/acl.xml
	at org.apache.commons.configuration.AbstractFileConfiguration.load(AbstractFileConfiguration.java:259)
	at org.apache.commons.configuration.AbstractFileConfiguration.load(AbstractFileConfiguration.java:238)
	at org.apache.commons.configuration.AbstractHierarchicalFileConfiguration.load(AbstractHierarchicalFileConfiguration.java:184)
	at org.apache.commons.configuration.AbstractHierarchicalFileConfiguration.<init>(AbstractHierarchicalFileConfiguration.java:95)
	at org.apache.commons.configuration.XMLConfiguration.<init>(XMLConfiguration.java:261)
	at com.shc.crossing.config.Config.loadXMLConfigFile(Config.java:55)
	at com.shc.crossing.config.AclConfig.loadConfig(AclConfig.java:113)
	at com.shc.crossing.config.ConfigWizard.loadConfig(ConfigWizard.java:71)
	at com.shc.crossing.config.ConfigWizard.init(ConfigWizard.java:88)
	at com.shc.crossing.wizard.WizardManager.initWizard(WizardManager.java:42)
	at com.shc.mifty.startup.Bootstrap.main(Bootstrap.java:26)

[host] 2016-05-17 14:50:09.483 [0ms] [DEBUG] [main] com.shc.crossing.wizard.Wizard.init(Wizard.java:36) Initializing ConfigWizard.
[host] 2016-05-17 14:50:09.493 [10ms] [DEBUG] [main] com.shc.crossing.config.Config.loadConfig(Config.java:64) loading AclConfig
[host] 2016-05-17 14:50:09.538 [55ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:449) ConfigurationUtils.locate(): base is null, name is conf/acl.xml
[host] 2016-05-17 14:50:09.542 [59ms] [DEBUG] [main] org.apache.commons.configuration.DefaultFileSystem.locateFromURL(DefaultFileSystem.java:281) Could not locate file conf/acl.xml at null: no protocol: conf/acl.xml
[host] 2016-05-17 14:50:09.553 [70ms] [ERROR] [main] com.shc.crossing.log.MyLog.printStackTrace(MyLog.java:46) org.apache.commons.configuration.ConfigurationException: Cannot locate configuration source conf/acl.xml
	at org.apache.commons.configuration.AbstractFileConfiguration.load(AbstractFileConfiguration.java:259)
	at org.apache.commons.configuration.AbstractFileConfiguration.load(AbstractFileConfiguration.java:238)
	at org.apache.commons.configuration.AbstractHierarchicalFileConfiguration.load(AbstractHierarchicalFileConfiguration.java:184)
	at org.apache.commons.configuration.AbstractHierarchicalFileConfiguration.<init>(AbstractHierarchicalFileConfiguration.java:95)
	at org.apache.commons.configuration.XMLConfiguration.<init>(XMLConfiguration.java:261)
	at com.shc.crossing.config.Config.loadXMLConfigFile(Config.java:55)
	at com.shc.crossing.config.AclConfig.loadConfig(AclConfig.java:113)
	at com.shc.crossing.config.ConfigWizard.loadConfig(ConfigWizard.java:71)
	at com.shc.crossing.config.ConfigWizard.init(ConfigWizard.java:88)
	at com.shc.crossing.wizard.WizardManager.initWizard(WizardManager.java:42)
	at com.shc.mifty.startup.Bootstrap.main(Bootstrap.java:26)

[host] 2016-05-17 14:51:00.320 [0ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing ConfigWizard.
[host] 2016-05-17 14:51:00.328 [8ms] [DEBUG] [main] com.shc.mifty.config.Config.loadConfig(Config.java:63) loading ServerConfig
[host] 2016-05-17 14:51:00.367 [47ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setFileName(AbstractFileConfiguration.java:588) FileName set to conf/server.properties
[host] 2016-05-17 14:51:00.373 [53ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:449) ConfigurationUtils.locate(): base is null, name is conf/server.properties
[host] 2016-05-17 14:51:00.373 [53ms] [DEBUG] [main] org.apache.commons.configuration.DefaultFileSystem.locateFromURL(DefaultFileSystem.java:281) Could not locate file conf/server.properties at null: no protocol: conf/server.properties
[host] 2016-05-17 14:51:00.380 [60ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:493) Loading configuration from the path conf/server.properties
[host] 2016-05-17 14:51:00.380 [60ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setBasePath(AbstractFileConfiguration.java:626) Base path set to file:///Users/shc/Desktop/devspace/javaspace/mifty/conf/server.properties
[host] 2016-05-17 14:51:00.419 [99ms] [INFO] [main] com.shc.mifty.config.ServerConfig.print(ServerConfig.java:68) ServerConfig:
server.bind_address           = 0.0.0.0
server.decrypt.key            = miftyExampleKey
server.port                   = 9090
server.backlog                = 100
server.encrypt.type           = DES
server.sign.key               = miftyExampleKey
server.sign.type              = MD5
server.ssl                    = false
server.keystore               = /data/keystore
server.encrypt.key            = miftyExampleKey

[host] 2016-05-17 15:26:38.857 [0ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing ConfigWizard.
[host] 2016-05-17 15:26:38.865 [8ms] [DEBUG] [main] com.shc.mifty.config.Config.loadConfig(Config.java:63) loading ServerConfig
[host] 2016-05-17 15:26:38.932 [75ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setFileName(AbstractFileConfiguration.java:588) FileName set to conf/server.properties
[host] 2016-05-17 15:26:38.940 [83ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:449) ConfigurationUtils.locate(): base is null, name is conf/server.properties
[host] 2016-05-17 15:26:38.941 [84ms] [DEBUG] [main] org.apache.commons.configuration.DefaultFileSystem.locateFromURL(DefaultFileSystem.java:281) Could not locate file conf/server.properties at null: no protocol: conf/server.properties
[host] 2016-05-17 15:26:38.947 [90ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:493) Loading configuration from the path conf/server.properties
[host] 2016-05-17 15:26:38.948 [91ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setBasePath(AbstractFileConfiguration.java:626) Base path set to file:///Users/shc/Desktop/devspace/javaspace/mifty/conf/server.properties
[host] 2016-05-17 15:26:39.008 [151ms] [INFO] [main] com.shc.mifty.config.ServerConfig.print(ServerConfig.java:68) ServerConfig:
server.bind_address           = 0.0.0.0
server.decrypt.key            = miftyExampleKey
server.port                   = 9090
server.backlog                = 100
server.encrypt.type           = DES
server.sign.key               = miftyExampleKey
server.sign.type              = MD5
server.ssl                    = false
server.keystore               = /data/keystore
server.encrypt.key            = miftyExampleKey

[host] 2016-05-17 15:26:39.008 [151ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing DaoWizard.
[host] 2016-05-17 17:00:42.996 [1ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing ConfigWizard.
[host] 2016-05-17 17:00:43.007 [12ms] [DEBUG] [main] com.shc.mifty.config.Config.loadConfig(Config.java:63) loading ServerConfig
[host] 2016-05-17 17:00:43.063 [68ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setFileName(AbstractFileConfiguration.java:588) FileName set to conf/server.properties
[host] 2016-05-17 17:00:43.067 [72ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:449) ConfigurationUtils.locate(): base is null, name is conf/server.properties
[host] 2016-05-17 17:00:43.068 [73ms] [DEBUG] [main] org.apache.commons.configuration.DefaultFileSystem.locateFromURL(DefaultFileSystem.java:281) Could not locate file conf/server.properties at null: no protocol: conf/server.properties
[host] 2016-05-17 17:00:43.074 [79ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:493) Loading configuration from the path conf/server.properties
[host] 2016-05-17 17:00:43.075 [80ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setBasePath(AbstractFileConfiguration.java:626) Base path set to file:///Users/shc/Desktop/devspace/javaspace/mifty/conf/server.properties
[host] 2016-05-17 17:00:43.126 [131ms] [INFO] [main] com.shc.mifty.config.ServerConfig.print(ServerConfig.java:68) ServerConfig:
server.bind_address           = 0.0.0.0
server.decrypt.key            = miftyExampleKey
server.port                   = 9090
server.backlog                = 100
server.encrypt.type           = DES
server.sign.key               = miftyExampleKey
server.sign.type              = MD5
server.keystore               = /data/keystore
server.ssl.enabled            = false
server.ssl.port               = 9091
server.encrypt.key            = miftyExampleKey

[host] 2016-05-17 17:00:43.126 [131ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing DaoWizard.
[host] 2016-05-17 17:02:24.803 [0ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing ConfigWizard.
[host] 2016-05-17 17:02:24.810 [7ms] [DEBUG] [main] com.shc.mifty.config.Config.loadConfig(Config.java:63) loading ServerConfig
[host] 2016-05-17 17:02:24.851 [48ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setFileName(AbstractFileConfiguration.java:588) FileName set to conf/server.properties
[host] 2016-05-17 17:02:24.856 [53ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:449) ConfigurationUtils.locate(): base is null, name is conf/server.properties
[host] 2016-05-17 17:02:24.857 [54ms] [DEBUG] [main] org.apache.commons.configuration.DefaultFileSystem.locateFromURL(DefaultFileSystem.java:281) Could not locate file conf/server.properties at null: no protocol: conf/server.properties
[host] 2016-05-17 17:02:24.864 [61ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:493) Loading configuration from the path conf/server.properties
[host] 2016-05-17 17:02:24.864 [61ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setBasePath(AbstractFileConfiguration.java:626) Base path set to file:///Users/shc/Desktop/devspace/javaspace/mifty/conf/server.properties
[host] 2016-05-17 17:02:24.904 [101ms] [INFO] [main] com.shc.mifty.config.ServerConfig.print(ServerConfig.java:68) ServerConfig:
server.bind_address           = 0.0.0.0
server.decrypt.key            = miftyExampleKey
server.port                   = 9090
server.backlog                = 100
server.encrypt.type           = DES
server.sign.key               = miftyExampleKey
server.sign.type              = MD5
server.keystore               = /data/keystore
server.ssl.enabled            = false
server.ssl.port               = 9091
server.encrypt.key            = miftyExampleKey

[host] 2016-05-17 17:02:24.904 [101ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing DaoWizard.
[host] 2016-05-17 17:03:33.234 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:03:33.281 [68478ms] [ERROR] [pool-1-thread-1] org.apache.thrift.server.TThreadPoolServer$WorkerProcess.run(TThreadPoolServer.java:295) Thrift error occurred during processing of message.
org.apache.thrift.TException: Service name not found in message name: echo.  Did you forget to use a TMultiplexProtocol in your client?
	at org.apache.thrift.TMultiplexedProcessor.process(TMultiplexedProcessor.java:103)
	at org.apache.thrift.server.TThreadPoolServer$WorkerProcess.run(TThreadPoolServer.java:286)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
[host] 2016-05-17 17:15:59.774 [0ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing ConfigWizard.
[host] 2016-05-17 17:15:59.782 [8ms] [DEBUG] [main] com.shc.mifty.config.Config.loadConfig(Config.java:63) loading ServerConfig
[host] 2016-05-17 17:15:59.820 [46ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setFileName(AbstractFileConfiguration.java:588) FileName set to conf/server.properties
[host] 2016-05-17 17:15:59.825 [51ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:449) ConfigurationUtils.locate(): base is null, name is conf/server.properties
[host] 2016-05-17 17:15:59.825 [51ms] [DEBUG] [main] org.apache.commons.configuration.DefaultFileSystem.locateFromURL(DefaultFileSystem.java:281) Could not locate file conf/server.properties at null: no protocol: conf/server.properties
[host] 2016-05-17 17:15:59.831 [57ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:493) Loading configuration from the path conf/server.properties
[host] 2016-05-17 17:15:59.832 [58ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setBasePath(AbstractFileConfiguration.java:626) Base path set to file:///Users/shc/Desktop/devspace/javaspace/mifty/conf/server.properties
[host] 2016-05-17 17:15:59.872 [98ms] [INFO] [main] com.shc.mifty.config.ServerConfig.print(ServerConfig.java:68) ServerConfig:
server.bind_address           = 0.0.0.0
server.decrypt.key            = miftyExampleKey
server.port                   = 9090
server.backlog                = 100
server.encrypt.type           = DES
server.sign.key               = miftyExampleKey
server.sign.type              = MD5
server.keystore               = /data/keystore
server.ssl.enabled            = false
server.ssl.port               = 9091
server.encrypt.key            = miftyExampleKey

[host] 2016-05-17 17:15:59.872 [98ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing DaoWizard.
[host] 2016-05-17 17:16:00.053 [279ms] [ERROR] [Thread-1] com.shc.mifty.startup.MiftyServer.secure(MiftyServer.java:103) Mifty server startup failed.
[host] 2016-05-17 17:16:00.055 [281ms] [ERROR] [Thread-1] com.shc.mifty.log.MyLog.printStackTrace(MyLog.java:43) org.apache.thrift.transport.TTransportException: Error creating the transport
	at org.apache.thrift.transport.TSSLTransportFactory.createSSLContext(TSSLTransportFactory.java:214)
	at org.apache.thrift.transport.TSSLTransportFactory.getServerSocket(TSSLTransportFactory.java:108)
	at com.shc.mifty.startup.MiftyServer.secure(MiftyServer.java:93)
	at com.shc.mifty.startup.MiftyServer.access$1(MiftyServer.java:88)
	at com.shc.mifty.startup.MiftyServer$2.run(MiftyServer.java:121)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.IOException: Could not load file: /data/keystore
	at org.apache.thrift.transport.TSSLTransportFactory.getStoreAsStream(TSSLTransportFactory.java:255)
	at org.apache.thrift.transport.TSSLTransportFactory.createSSLContext(TSSLTransportFactory.java:198)
	... 5 more

[host] 2016-05-17 17:17:15.485 [0ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing ConfigWizard.
[host] 2016-05-17 17:17:15.493 [8ms] [DEBUG] [main] com.shc.mifty.config.Config.loadConfig(Config.java:63) loading ServerConfig
[host] 2016-05-17 17:17:15.543 [58ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setFileName(AbstractFileConfiguration.java:588) FileName set to conf/server.properties
[host] 2016-05-17 17:17:15.548 [63ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:449) ConfigurationUtils.locate(): base is null, name is conf/server.properties
[host] 2016-05-17 17:17:15.549 [64ms] [DEBUG] [main] org.apache.commons.configuration.DefaultFileSystem.locateFromURL(DefaultFileSystem.java:281) Could not locate file conf/server.properties at null: no protocol: conf/server.properties
[host] 2016-05-17 17:17:15.554 [69ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:493) Loading configuration from the path conf/server.properties
[host] 2016-05-17 17:17:15.556 [71ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setBasePath(AbstractFileConfiguration.java:626) Base path set to file:///Users/shc/Desktop/devspace/javaspace/mifty/conf/server.properties
[host] 2016-05-17 17:17:15.613 [128ms] [INFO] [main] com.shc.mifty.config.ServerConfig.print(ServerConfig.java:68) ServerConfig:
server.bind_address           = 0.0.0.0
server.decrypt.key            = miftyExampleKey
server.port                   = 9090
server.backlog                = 100
server.encrypt.type           = DES
server.sign.key               = miftyExampleKey
server.sign.type              = MD5
server.keystore               = /data/keystore
server.ssl.enabled            = false
server.ssl.port               = 9091
server.encrypt.key            = miftyExampleKey

[host] 2016-05-17 17:17:15.615 [130ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing DaoWizard.
[host] 2016-05-17 17:18:31.753 [0ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing ConfigWizard.
[host] 2016-05-17 17:18:31.762 [9ms] [DEBUG] [main] com.shc.mifty.config.Config.loadConfig(Config.java:63) loading ServerConfig
[host] 2016-05-17 17:18:31.808 [55ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setFileName(AbstractFileConfiguration.java:588) FileName set to conf/server.properties
[host] 2016-05-17 17:18:31.813 [60ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:449) ConfigurationUtils.locate(): base is null, name is conf/server.properties
[host] 2016-05-17 17:18:31.813 [60ms] [DEBUG] [main] org.apache.commons.configuration.DefaultFileSystem.locateFromURL(DefaultFileSystem.java:281) Could not locate file conf/server.properties at null: no protocol: conf/server.properties
[host] 2016-05-17 17:18:31.820 [67ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:493) Loading configuration from the path conf/server.properties
[host] 2016-05-17 17:18:31.820 [67ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setBasePath(AbstractFileConfiguration.java:626) Base path set to file:///Users/shc/Desktop/devspace/javaspace/mifty/conf/server.properties
[host] 2016-05-17 17:18:31.868 [115ms] [INFO] [main] com.shc.mifty.config.ServerConfig.print(ServerConfig.java:68) ServerConfig:
server.bind_address           = 0.0.0.0
server.decrypt.key            = miftyExampleKey
server.port                   = 9090
server.backlog                = 100
server.encrypt.type           = DES
server.sign.key               = miftyExampleKey
server.sign.type              = MD5
server.keystore               = /data/keystore
server.ssl.enabled            = false
server.ssl.port               = 9091
server.encrypt.key            = miftyExampleKey

[host] 2016-05-17 17:18:31.869 [116ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing DaoWizard.
[host] 2016-05-17 17:18:32.002 [249ms] [INFO] [Thread-0] com.shc.mifty.startup.MiftyServer.simple(MiftyServer.java:80) Starting Mifty server...
[host] 2016-05-17 17:18:49.484 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:18:49.541 [17788ms] [ERROR] [pool-1-thread-1] org.apache.thrift.server.TThreadPoolServer$WorkerProcess.run(TThreadPoolServer.java:295) Thrift error occurred during processing of message.
org.apache.thrift.TException: Service name not found in message name: echo.  Did you forget to use a TMultiplexProtocol in your client?
	at org.apache.thrift.TMultiplexedProcessor.process(TMultiplexedProcessor.java:103)
	at org.apache.thrift.server.TThreadPoolServer$WorkerProcess.run(TThreadPoolServer.java:286)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
[host] 2016-05-17 17:23:11.796 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:23:11.906 [280153ms] [DEBUG] [pool-1-thread-2] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:88) echo: {"sign":"E00192D3EF9539AD4C3A634064FEC575","params":{"echo":"How are you!","name":"Darren"}}
[host] 2016-05-17 17:23:11.975 [280222ms] [DEBUG] [pool-1-thread-2] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:23:12.007 [280254ms] [INFO] [pool-1-thread-2] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:111) 
name: Darren
say: How are you!
[host] 2016-05-17 17:23:12.007 [280254ms] [DEBUG] [pool-1-thread-2] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,How are you!"} signKey: miftyExampleKey
[host] 2016-05-17 17:23:12.009 [280256ms] [DEBUG] [pool-1-thread-2] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:126) sayHello: {"sign":"23E7A98AFE424ADA0A8DC2D32AC71230","params":{"sentence":"Hi, Darren ,How are you!"},"errorCode":0,"errorInfo":"Success"}
[host] 2016-05-17 17:23:12.024 [228ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:23:12.423 [280670ms] [DEBUG] [pool-1-thread-2] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:41) sayHello: {"encrypted":"ubUVRZ7gfuScyBl/cKNvZ4mU79L5s0fMPlLTwIrhAvbQhV81QuWz42JN6uzyqXrT87UF6DuzniEDzDWBQTj6BSHOJKF7i4SPv6Z6JPhgfHSrmg92+jHQajTACZbx06uq"}
[host] 2016-05-17 17:23:12.762 [281009ms] [DEBUG] [pool-1-thread-2] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:23:12.762 [281009ms] [INFO] [pool-1-thread-2] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:64) 
name: Darren
say: Good morning!
[host] 2016-05-17 17:23:12.763 [281010ms] [DEBUG] [pool-1-thread-2] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,Good morning!"} signKey: miftyExampleKey
[host] 2016-05-17 17:23:12.764 [281011ms] [DEBUG] [pool-1-thread-2] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:79) sayHello: {"encrypted":"ubUVRZ7gfuRI6GxgNpVEw1nnmwy+J9bbuis4kCz+XvQ/VjGKv3wcxNoiSahhy0dw/Net8Oc5aaE0VFQZDkZ+1cfp7ZuKpo1PauVSt7tVmInUH1EwxOoLKPKRArKRUr/l","errorCode":0,"errorInfo":"Success"}
[host] 2016-05-17 17:23:20.830 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:23:20.885 [289132ms] [DEBUG] [pool-1-thread-3] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:88) echo: {"sign":"E00192D3EF9539AD4C3A634064FEC575","params":{"echo":"How are you!","name":"Darren"}}
[host] 2016-05-17 17:23:20.886 [289133ms] [DEBUG] [pool-1-thread-3] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:23:20.887 [289134ms] [INFO] [pool-1-thread-3] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:111) 
name: Darren
say: How are you!
[host] 2016-05-17 17:23:20.887 [289134ms] [DEBUG] [pool-1-thread-3] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,How are you!"} signKey: miftyExampleKey
[host] 2016-05-17 17:23:20.888 [289135ms] [DEBUG] [pool-1-thread-3] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:126) sayHello: {"sign":"23E7A98AFE424ADA0A8DC2D32AC71230","params":{"sentence":"Hi, Darren ,How are you!"},"errorCode":0,"errorInfo":"Success"}
[host] 2016-05-17 17:23:20.892 [62ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:23:21.224 [289471ms] [DEBUG] [pool-1-thread-3] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:41) sayHello: {"encrypted":"ubUVRZ7gfuScyBl/cKNvZ4mU79L5s0fMPlLTwIrhAvbQhV81QuWz42JN6uzyqXrT87UF6DuzniEDzDWBQTj6BSHOJKF7i4SPv6Z6JPhgfHSrmg92+jHQajTACZbx06uq"}
[host] 2016-05-17 17:23:21.227 [289474ms] [DEBUG] [pool-1-thread-3] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:23:21.228 [289475ms] [INFO] [pool-1-thread-3] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:64) 
name: Darren
say: Good morning!
[host] 2016-05-17 17:23:21.228 [289475ms] [DEBUG] [pool-1-thread-3] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,Good morning!"} signKey: miftyExampleKey
[host] 2016-05-17 17:23:21.229 [289476ms] [DEBUG] [pool-1-thread-3] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:79) sayHello: {"encrypted":"ubUVRZ7gfuRI6GxgNpVEw1nnmwy+J9bbuis4kCz+XvQ/VjGKv3wcxNoiSahhy0dw/Net8Oc5aaE0VFQZDkZ+1cfp7ZuKpo1PauVSt7tVmInUH1EwxOoLKPKRArKRUr/l","errorCode":0,"errorInfo":"Success"}
[host] 2016-05-17 17:53:23.341 [1ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing ConfigWizard.
[host] 2016-05-17 17:53:23.350 [10ms] [DEBUG] [main] com.shc.mifty.config.Config.loadConfig(Config.java:63) loading ServerConfig
[host] 2016-05-17 17:53:23.410 [70ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setFileName(AbstractFileConfiguration.java:588) FileName set to conf/server.properties
[host] 2016-05-17 17:53:23.415 [75ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:449) ConfigurationUtils.locate(): base is null, name is conf/server.properties
[host] 2016-05-17 17:53:23.416 [76ms] [DEBUG] [main] org.apache.commons.configuration.DefaultFileSystem.locateFromURL(DefaultFileSystem.java:281) Could not locate file conf/server.properties at null: no protocol: conf/server.properties
[host] 2016-05-17 17:53:23.422 [82ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:493) Loading configuration from the path conf/server.properties
[host] 2016-05-17 17:53:23.423 [83ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setBasePath(AbstractFileConfiguration.java:626) Base path set to file:///Users/shc/Desktop/devspace/javaspace/mifty/conf/server.properties
[host] 2016-05-17 17:53:23.477 [137ms] [INFO] [main] com.shc.mifty.config.ServerConfig.print(ServerConfig.java:68) ServerConfig:
server.bind_address           = 0.0.0.0
server.decrypt.key            = miftyExampleKey
server.port                   = 9090
server.backlog                = 100
server.encrypt.type           = DES
server.sign.key               = miftyExampleKey
server.sign.type              = MD5
server.keystore               = /data/keystore
server.ssl.enabled            = false
server.ssl.port               = 9091
server.encrypt.key            = miftyExampleKey

[host] 2016-05-17 17:53:23.477 [137ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing DaoWizard.
[host] 2016-05-17 17:53:23.536 [196ms] [INFO] [Thread-0] com.shc.mifty.startup.MiftyServer.simple(MiftyServer.java:80) Starting Mifty server...
[host] 2016-05-17 17:53:27.636 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:53:27.695 [4355ms] [DEBUG] [pool-1-thread-1] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:92) echo: {"sign":"E00192D3EF9539AD4C3A634064FEC575","params":{"echo":"How are you!","name":"Darren"}}
[host] 2016-05-17 17:53:27.739 [4399ms] [DEBUG] [pool-1-thread-1] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:53:27.757 [4417ms] [INFO] [pool-1-thread-1] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:115) 
name: Darren
say: How are you!
[host] 2016-05-17 17:53:27.757 [4417ms] [DEBUG] [pool-1-thread-1] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,How are you!"} signKey: miftyExampleKey
[host] 2016-05-17 17:53:27.760 [4420ms] [DEBUG] [pool-1-thread-1] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:130) sayHello: {"sign":"23E7A98AFE424ADA0A8DC2D32AC71230","params":{"sentence":"Hi, Darren ,How are you!"},"errorCode":0,"errorInfo":"Success"}
[host] 2016-05-17 17:53:27.764 [128ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:53:28.015 [4675ms] [DEBUG] [pool-1-thread-1] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:45) sayHello: {"encrypted":"ubUVRZ7gfuScyBl/cKNvZ4mU79L5s0fMPlLTwIrhAvbQhV81QuWz42JN6uzyqXrT87UF6DuzniEDzDWBQTj6BSHOJKF7i4SPv6Z6JPhgfHSrmg92+jHQajTACZbx06uq"}
[host] 2016-05-17 17:53:28.253 [4913ms] [DEBUG] [pool-1-thread-1] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-17 17:53:28.253 [4913ms] [INFO] [pool-1-thread-1] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:68) 
name: Darren
say: Good morning!
[host] 2016-05-17 17:53:28.254 [4914ms] [DEBUG] [pool-1-thread-1] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,Good morning!"} signKey: miftyExampleKey
[host] 2016-05-17 17:53:28.255 [4915ms] [DEBUG] [pool-1-thread-1] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:83) sayHello: {"encrypted":"ubUVRZ7gfuRI6GxgNpVEw1nnmwy+J9bbuis4kCz+XvQ/VjGKv3wcxNoiSahhy0dw/Net8Oc5aaE0VFQZDkZ+1cfp7ZuKpo1PauVSt7tVmInUH1EwxOoLKPKRArKRUr/l","errorCode":0,"errorInfo":"Success"}
[host] 2016-05-18 08:53:23.278 [0ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing ConfigWizard.
[host] 2016-05-18 08:53:23.286 [8ms] [DEBUG] [main] com.shc.mifty.config.Config.loadConfig(Config.java:63) loading ServerConfig
[host] 2016-05-18 08:53:23.356 [78ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setFileName(AbstractFileConfiguration.java:588) FileName set to conf/server.properties
[host] 2016-05-18 08:53:23.366 [88ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:449) ConfigurationUtils.locate(): base is null, name is conf/server.properties
[host] 2016-05-18 08:53:23.367 [89ms] [DEBUG] [main] org.apache.commons.configuration.DefaultFileSystem.locateFromURL(DefaultFileSystem.java:281) Could not locate file conf/server.properties at null: no protocol: conf/server.properties
[host] 2016-05-18 08:53:23.373 [95ms] [DEBUG] [main] org.apache.commons.configuration.ConfigurationUtils.locate(ConfigurationUtils.java:493) Loading configuration from the path conf/server.properties
[host] 2016-05-18 08:53:23.373 [95ms] [DEBUG] [main] org.apache.commons.configuration.AbstractFileConfiguration.setBasePath(AbstractFileConfiguration.java:626) Base path set to file:///Users/shc/Desktop/devspace/javaspace/mifty/conf/server.properties
[host] 2016-05-18 08:53:23.443 [165ms] [INFO] [main] com.shc.mifty.config.ServerConfig.print(ServerConfig.java:68) ServerConfig:
server.bind_address           = 0.0.0.0
server.decrypt.key            = miftyExampleKey
server.port                   = 9090
server.backlog                = 100
server.encrypt.type           = DES
server.sign.key               = miftyExampleKey
server.sign.type              = MD5
server.keystore               = /data/keystore
server.ssl.enabled            = false
server.ssl.port               = 9091
server.encrypt.key            = miftyExampleKey

[host] 2016-05-18 08:53:23.444 [166ms] [DEBUG] [main] com.shc.mifty.wizard.Wizard.init(Wizard.java:37) Initializing DaoWizard.
[host] 2016-05-18 08:53:23.510 [232ms] [INFO] [Thread-0] com.shc.mifty.startup.MiftyServer.simple(MiftyServer.java:80) Starting Mifty server...
[host] 2016-05-18 08:53:27.941 [0ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-18 08:53:28.014 [4736ms] [DEBUG] [pool-1-thread-1] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:98) echo: {"sign":"E00192D3EF9539AD4C3A634064FEC575","params":{"echo":"How are you!","name":"Darren"}}
[host] 2016-05-18 08:53:28.056 [4778ms] [DEBUG] [pool-1-thread-1] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"echo":"How are you!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-18 08:53:28.070 [4792ms] [INFO] [pool-1-thread-1] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:121) 
name: Darren
say: How are you!
[host] 2016-05-18 08:53:28.070 [4792ms] [DEBUG] [pool-1-thread-1] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"sentence":"Hi, Darren ,How are you!"} signKey: miftyExampleKey
[host] 2016-05-18 08:53:28.072 [4794ms] [DEBUG] [pool-1-thread-1] com.shc.mifty.example.ExaServiceImpl.echo(ExaServiceImpl.java:136) sayHello: {"sign":"23E7A98AFE424ADA0A8DC2D32AC71230","params":{"sentence":"Hi, Darren ,How are you!"},"errorCode":0,"errorInfo":"Success"}
[host] 2016-05-18 08:53:28.076 [135ms] [DEBUG] [main] com.shc.crossing.specs.ParamBuilder.buildSignedParams(ParamBuilder.java:96) p: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-18 08:53:28.392 [5114ms] [DEBUG] [pool-1-thread-1] com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:47) sayHello: {"encrypted":"ubUVRZ7gfuScyBl/cKNvZ4mU79L5s0fMPlLTwIrhAvbQhV81QuWz42JN6uzyqXrT87UF6DuzniEDzDWBQTj6BSHOJKF7i4SPv6Z6JPhgfHSrmg92+jHQajTACZbx06uq"}
[host] 2016-05-18 08:53:28.613 [5335ms] [DEBUG] [pool-1-thread-1] com.shc.crossing.specs.CrossingService.buildSign(CrossingService.java:110) source: {"hello":"Good morning!","name":"Darren"} signKey: miftyExampleKey
[host] 2016-05-18 08:53:28.697 [5419ms] [DEBUG] [pool-1-thread-1] org.hibernate.internal.CoreLogging.messageLogger(CoreLogging.java:28) Logging Provider: org.jboss.logging.Log4jLoggerProvider
[host] 2016-05-18 08:53:28.717 [5439ms] [DEBUG] [pool-1-thread-1] org.hibernate.integrator.internal.IntegratorServiceImpl.addIntegrator(IntegratorServiceImpl.java:46) Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
[host] 2016-05-18 08:53:28.722 [5444ms] [DEBUG] [pool-1-thread-1] org.hibernate.integrator.internal.IntegratorServiceImpl.addIntegrator(IntegratorServiceImpl.java:46) Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
[host] 2016-05-18 08:53:28.732 [5454ms] [DEBUG] [pool-1-thread-1] org.hibernate.integrator.internal.IntegratorServiceImpl.addIntegrator(IntegratorServiceImpl.java:46) Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
[host] 2016-05-18 08:53:28.912 [5634ms] [INFO] [pool-1-thread-1] org.hibernate.Version.logVersion(Version.java:37) HHH000412: Hibernate Core {5.1.0.Final}
[host] 2016-05-18 08:53:28.915 [5637ms] [INFO] [pool-1-thread-1] org.hibernate.cfg.Environment.<clinit>(Environment.java:213) HHH000206: hibernate.properties not found
[host] 2016-05-18 08:53:28.917 [5639ms] [INFO] [pool-1-thread-1] org.hibernate.cfg.Environment.buildBytecodeProvider(Environment.java:317) HHH000021: Bytecode provider name : javassist
[host] 2016-05-18 08:53:29.011 [5733ms] [DEBUG] [pool-1-thread-1] org.hibernate.boot.jaxb.internal.stax.LocalXmlResourceResolver.resolveEntity(LocalXmlResourceResolver.java:57) Interpreting public/system identifier : [-//Hibernate/Hibernate Configuration DTD 3.0//EN] - [http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd]
[host] 2016-05-18 08:53:29.011 [5733ms] [DEBUG] [pool-1-thread-1] org.hibernate.boot.jaxb.internal.stax.LocalXmlResourceResolver.resolveEntity(LocalXmlResourceResolver.java:85) Recognized hibernate-configuration identifier; attempting to resolve on classpath under org/hibernate/
[host] 2016-05-18 08:53:29.020 [5742ms] [DEBUG] [pool-1-thread-1] org.hibernate.boot.cfgxml.internal.JaxbCfgProcessor.unmarshal(JaxbCfgProcessor.java:116) cfg.xml document did not define namespaces; wrapping in custom event reader to introduce namespace information
[host] 2016-05-18 08:53:29.462 [6184ms] [DEBUG] [pool-1-thread-1] org.hibernate.integrator.internal.IntegratorServiceImpl.addIntegrator(IntegratorServiceImpl.java:46) Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
[host] 2016-05-18 08:53:29.463 [6185ms] [DEBUG] [pool-1-thread-1] org.hibernate.integrator.internal.IntegratorServiceImpl.addIntegrator(IntegratorServiceImpl.java:46) Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
[host] 2016-05-18 08:53:29.463 [6185ms] [DEBUG] [pool-1-thread-1] org.hibernate.integrator.internal.IntegratorServiceImpl.addIntegrator(IntegratorServiceImpl.java:46) Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
[host] 2016-05-18 08:53:29.492 [6214ms] [DEBUG] [pool-1-thread-1] org.hibernate.service.spi.ServiceBinding.setService(ServiceBinding.java:68) Overriding existing service binding [org.hibernate.secure.spi.JaccService]
[host] 2016-05-18 08:53:29.492 [6214ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:653) Building session factory using provided StandardServiceRegistry
[host] 2016-05-18 08:53:29.526 [6248ms] [DEBUG] [pool-1-thread-1] org.hibernate.cache.internal.RegionFactoryInitiator.initiateService(RegionFactoryInitiator.java:88) Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
[host] 2016-05-18 08:53:29.543 [6265ms] [INFO] [pool-1-thread-1] org.hibernate.annotations.common.reflection.java.JavaReflectionManager.<clinit>(JavaReflectionManager.java:66) HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
[host] 2016-05-18 08:53:29.597 [6319ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration boolean -> org.hibernate.type.BooleanType@3ac9a820
[host] 2016-05-18 08:53:29.597 [6319ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration boolean -> org.hibernate.type.BooleanType@3ac9a820
[host] 2016-05-18 08:53:29.598 [6320ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@3ac9a820
[host] 2016-05-18 08:53:29.600 [6322ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@5893efc3
[host] 2016-05-18 08:53:29.603 [6325ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration true_false -> org.hibernate.type.TrueFalseType@7655ff39
[host] 2016-05-18 08:53:29.605 [6327ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration yes_no -> org.hibernate.type.YesNoType@4e12001b
[host] 2016-05-18 08:53:29.608 [6330ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration byte -> org.hibernate.type.ByteType@899cd30
[host] 2016-05-18 08:53:29.608 [6330ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration byte -> org.hibernate.type.ByteType@899cd30
[host] 2016-05-18 08:53:29.609 [6331ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@899cd30
[host] 2016-05-18 08:53:29.611 [6333ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration character -> org.hibernate.type.CharacterType@7f2d301f
[host] 2016-05-18 08:53:29.612 [6334ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration char -> org.hibernate.type.CharacterType@7f2d301f
[host] 2016-05-18 08:53:29.612 [6334ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@7f2d301f
[host] 2016-05-18 08:53:29.616 [6338ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration short -> org.hibernate.type.ShortType@641c692b
[host] 2016-05-18 08:53:29.617 [6339ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration short -> org.hibernate.type.ShortType@641c692b
[host] 2016-05-18 08:53:29.618 [6340ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.lang.Short -> org.hibernate.type.ShortType@641c692b
[host] 2016-05-18 08:53:29.620 [6342ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration integer -> org.hibernate.type.IntegerType@63b031ad
[host] 2016-05-18 08:53:29.621 [6343ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration int -> org.hibernate.type.IntegerType@63b031ad
[host] 2016-05-18 08:53:29.621 [6343ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@63b031ad
[host] 2016-05-18 08:53:29.624 [6346ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration long -> org.hibernate.type.LongType@25f8e68b
[host] 2016-05-18 08:53:29.625 [6347ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration long -> org.hibernate.type.LongType@25f8e68b
[host] 2016-05-18 08:53:29.625 [6347ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.lang.Long -> org.hibernate.type.LongType@25f8e68b
[host] 2016-05-18 08:53:29.629 [6351ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration float -> org.hibernate.type.FloatType@4079a595
[host] 2016-05-18 08:53:29.629 [6351ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration float -> org.hibernate.type.FloatType@4079a595
[host] 2016-05-18 08:53:29.630 [6352ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.lang.Float -> org.hibernate.type.FloatType@4079a595
[host] 2016-05-18 08:53:29.633 [6355ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration double -> org.hibernate.type.DoubleType@71ffd9f1
[host] 2016-05-18 08:53:29.634 [6356ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration double -> org.hibernate.type.DoubleType@71ffd9f1
[host] 2016-05-18 08:53:29.634 [6356ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@71ffd9f1
[host] 2016-05-18 08:53:29.637 [6359ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@145733c2
[host] 2016-05-18 08:53:29.638 [6360ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@145733c2
[host] 2016-05-18 08:53:29.639 [6361ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration big_integer -> org.hibernate.type.BigIntegerType@710ec7e6
[host] 2016-05-18 08:53:29.639 [6361ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@710ec7e6
[host] 2016-05-18 08:53:29.641 [6363ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration string -> org.hibernate.type.StringType@59c5ed26
[host] 2016-05-18 08:53:29.641 [6363ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.lang.String -> org.hibernate.type.StringType@59c5ed26
[host] 2016-05-18 08:53:29.642 [6364ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration nstring -> org.hibernate.type.StringNVarcharType@30518bfc
[host] 2016-05-18 08:53:29.644 [6366ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@4d50c50b
[host] 2016-05-18 08:53:29.646 [6368ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration url -> org.hibernate.type.UrlType@1bd13f0c
[host] 2016-05-18 08:53:29.646 [6368ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.net.URL -> org.hibernate.type.UrlType@1bd13f0c
[host] 2016-05-18 08:53:29.649 [6371ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration date -> org.hibernate.type.DateType@69a79533
[host] 2016-05-18 08:53:29.650 [6372ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.sql.Date -> org.hibernate.type.DateType@69a79533
[host] 2016-05-18 08:53:29.652 [6374ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration time -> org.hibernate.type.TimeType@55e26b7f
[host] 2016-05-18 08:53:29.653 [6375ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.sql.Time -> org.hibernate.type.TimeType@55e26b7f
[host] 2016-05-18 08:53:29.655 [6377ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration timestamp -> org.hibernate.type.TimestampType@47b0efe1
[host] 2016-05-18 08:53:29.655 [6377ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@47b0efe1
[host] 2016-05-18 08:53:29.656 [6378ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.util.Date -> org.hibernate.type.TimestampType@47b0efe1
[host] 2016-05-18 08:53:29.658 [6380ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@371e88fb
[host] 2016-05-18 08:53:29.660 [6382ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration calendar -> org.hibernate.type.CalendarType@605bfca9
[host] 2016-05-18 08:53:29.661 [6383ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@605bfca9
[host] 2016-05-18 08:53:29.661 [6383ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@605bfca9
[host] 2016-05-18 08:53:29.662 [6384ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@389e5972
[host] 2016-05-18 08:53:29.663 [6385ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration locale -> org.hibernate.type.LocaleType@2ca817f3
[host] 2016-05-18 08:53:29.664 [6386ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@2ca817f3
[host] 2016-05-18 08:53:29.665 [6387ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration currency -> org.hibernate.type.CurrencyType@719fe652
[host] 2016-05-18 08:53:29.665 [6387ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@719fe652
[host] 2016-05-18 08:53:29.667 [6389ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration timezone -> org.hibernate.type.TimeZoneType@50dcf55
[host] 2016-05-18 08:53:29.667 [6389ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@50dcf55
[host] 2016-05-18 08:53:29.669 [6391ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration class -> org.hibernate.type.ClassType@271e1866
[host] 2016-05-18 08:53:29.669 [6391ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.lang.Class -> org.hibernate.type.ClassType@271e1866
[host] 2016-05-18 08:53:29.671 [6393ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@1e6bbcd0
[host] 2016-05-18 08:53:29.671 [6393ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@1e6bbcd0
[host] 2016-05-18 08:53:29.672 [6394ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@7f210e81
[host] 2016-05-18 08:53:29.673 [6395ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration binary -> org.hibernate.type.BinaryType@b161194
[host] 2016-05-18 08:53:29.674 [6396ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration byte[] -> org.hibernate.type.BinaryType@b161194
[host] 2016-05-18 08:53:29.674 [6396ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration [B -> org.hibernate.type.BinaryType@b161194
[host] 2016-05-18 08:53:29.676 [6398ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@5126db0
[host] 2016-05-18 08:53:29.676 [6398ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@5126db0
[host] 2016-05-18 08:53:29.677 [6399ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@5126db0
[host] 2016-05-18 08:53:29.678 [6400ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration image -> org.hibernate.type.ImageType@69bf5fb1
[host] 2016-05-18 08:53:29.680 [6402ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration characters -> org.hibernate.type.CharArrayType@60e0f17a
[host] 2016-05-18 08:53:29.680 [6402ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration char[] -> org.hibernate.type.CharArrayType@60e0f17a
[host] 2016-05-18 08:53:29.681 [6403ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration [C -> org.hibernate.type.CharArrayType@60e0f17a
[host] 2016-05-18 08:53:29.682 [6404ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@b1c929f
[host] 2016-05-18 08:53:29.682 [6404ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@b1c929f
[host] 2016-05-18 08:53:29.683 [6405ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@b1c929f
[host] 2016-05-18 08:53:29.684 [6406ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration text -> org.hibernate.type.TextType@2b21631e
[host] 2016-05-18 08:53:29.685 [6407ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration ntext -> org.hibernate.type.NTextType@181f9666
[host] 2016-05-18 08:53:29.692 [6414ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration blob -> org.hibernate.type.BlobType@c346801
[host] 2016-05-18 08:53:29.693 [6415ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@c346801
[host] 2016-05-18 08:53:29.694 [6416ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@5ba71c51
[host] 2016-05-18 08:53:29.700 [6422ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration clob -> org.hibernate.type.ClobType@2abb7207
[host] 2016-05-18 08:53:29.700 [6422ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@2abb7207
[host] 2016-05-18 08:53:29.706 [6428ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration nclob -> org.hibernate.type.NClobType@48a5bc0c
[host] 2016-05-18 08:53:29.707 [6429ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@48a5bc0c
[host] 2016-05-18 08:53:29.708 [6430ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@32965597
[host] 2016-05-18 08:53:29.708 [6430ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@4060eb39
[host] 2016-05-18 08:53:29.710 [6432ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration serializable -> org.hibernate.type.SerializableType@4c05279b
[host] 2016-05-18 08:53:29.714 [6436ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration object -> org.hibernate.type.ObjectType@6cf7a61b
[host] 2016-05-18 08:53:29.714 [6436ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@6cf7a61b
[host] 2016-05-18 08:53:29.715 [6437ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@13b3f83
[host] 2016-05-18 08:53:29.716 [6438ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@58c6b216
[host] 2016-05-18 08:53:29.716 [6438ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@5cd5efe2
[host] 2016-05-18 08:53:29.716 [6438ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@61780e0b
[host] 2016-05-18 08:53:29.717 [6439ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@10e2262b
[host] 2016-05-18 08:53:29.717 [6439ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@6f37d9b5
[host] 2016-05-18 08:53:29.717 [6439ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@3bb6331e
[host] 2016-05-18 08:53:29.718 [6440ms] [DEBUG] [pool-1-thread-1] org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:135) Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@36d61532
[host] 2016-05-18 08:53:29.735 [6457ms] [WARN] [pool-1-thread-1] org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl.configure(DriverManagerConnectionProviderImpl.java:71) HHH10001002: Using Hibernate built-in connection pool (not for production use!)
[host] 2016-05-18 08:53:29.752 [6474ms] [INFO] [pool-1-thread-1] org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl.buildCreator(DriverManagerConnectionProviderImpl.java:127) HHH10001005: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/test]
[host] 2016-05-18 08:53:29.753 [6475ms] [INFO] [pool-1-thread-1] org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl.buildCreator(DriverManagerConnectionProviderImpl.java:133) HHH10001001: Connection properties: {useUnicode=true, user=root, password=123456, characterEncoding=utf8, useSSL=false}
[host] 2016-05-18 08:53:29.754 [6476ms] [INFO] [pool-1-thread-1] org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl.buildCreator(DriverManagerConnectionProviderImpl.java:141) HHH10001003: Autocommit mode: false
[host] 2016-05-18 08:53:29.759 [6481ms] [DEBUG] [pool-1-thread-1] org.jboss.logging.DelegatingBasicLogger.debugf(DelegatingBasicLogger.java:384) Initializing Connection pool with 1 Connections
[host] 2016-05-18 08:53:29.760 [6482ms] [INFO] [pool-1-thread-1] org.hibernate.engine.jdbc.connections.internal.PooledConnections.<init>(PooledConnections.java:39) HHH000115: Hibernate connection pool size: 2 (min=1)
[host] 2016-05-18 08:53:30.193 [6915ms] [DEBUG] [pool-1-thread-1] org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:72) Database ->
       name : MySQL
    version : 5.7.11
      major : 5
      minor : 7
[host] 2016-05-18 08:53:30.194 [6916ms] [DEBUG] [pool-1-thread-1] org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:83) Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.38 ( Revision: fe541c166cec739c74cc727c5da96c1028b4834a )
      major : 5
      minor : 1
[host] 2016-05-18 08:53:30.194 [6916ms] [DEBUG] [pool-1-thread-1] org.jboss.logging.DelegatingBasicLogger.debugf(DelegatingBasicLogger.java:389) JDBC version : 4.0
[host] 2016-05-18 08:53:30.236 [6958ms] [INFO] [pool-1-thread-1] org.hibernate.dialect.Dialect.<init>(Dialect.java:156) HHH000400: Using dialect: org.hibernate.dialect.MySQLDialect
[host] 2016-05-18 08:53:30.299 [7021ms] [DEBUG] [pool-1-thread-1] org.hibernate.engine.jdbc.env.spi.IdentifierHelperBuilder.applyIdentifierCasing(IdentifierHelperBuilder.java:117) JDBC driver metadata reported database stores quoted identifiers in more than one case
[host] 2016-05-18 08:53:30.309 [7031ms] [DEBUG] [pool-1-thread-1] org.hibernate.engine.jdbc.env.spi.IdentifierHelperBuilder.build(IdentifierHelperBuilder.java:191) IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [MIXED]; that will likely lead to problems in schema update and validation if using quoted identifiers
[host] 2016-05-18 08:53:30.395 [7117ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
[host] 2016-05-18 08:53:30.397 [7119ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
[host] 2016-05-18 08:53:30.399 [7121ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
[host] 2016-05-18 08:53:30.400 [7122ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
[host] 2016-05-18 08:53:30.401 [7123ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
[host] 2016-05-18 08:53:30.406 [7128ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
[host] 2016-05-18 08:53:30.408 [7130ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
[host] 2016-05-18 08:53:30.413 [7135ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[host] 2016-05-18 08:53:30.416 [7138ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
[host] 2016-05-18 08:53:30.418 [7140ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
[host] 2016-05-18 08:53:30.419 [7141ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
[host] 2016-05-18 08:53:30.421 [7143ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
[host] 2016-05-18 08:53:30.421 [7143ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[host] 2016-05-18 08:53:30.424 [7146ms] [DEBUG] [pool-1-thread-1] org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:78) Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
[host] 2016-05-18 08:53:30.488 [7210ms] [DEBUG] [pool-1-thread-1] org.hibernate.boot.model.relational.Namespace.<init>(Namespace.java:47) Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
[host] 2016-05-18 08:53:30.555 [7277ms] [DEBUG] [pool-1-thread-1] org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:208) Building session factory
[host] 2016-05-18 08:53:30.557 [7279ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:69) SessionFactory name : null
[host] 2016-05-18 08:53:30.558 [7280ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:70) Automatic flush during beforeCompletion(): disabled
[host] 2016-05-18 08:53:30.558 [7280ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:71) Automatic session close at end of transaction: disabled
[host] 2016-05-18 08:53:30.559 [7281ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:73) Statistics: disabled
[host] 2016-05-18 08:53:30.559 [7281ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:75) Deleted entity synthetic identifier rollback: disabled
[host] 2016-05-18 08:53:30.559 [7281ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:76) Default entity-mode: pojo
[host] 2016-05-18 08:53:30.559 [7281ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:77) Check Nullability in Core (should be disabled when Bean Validation is on): enabled
[host] 2016-05-18 08:53:30.560 [7282ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:78) Allow initialization of lazy state outside session : disabled
[host] 2016-05-18 08:53:30.560 [7282ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:80) Using BatchFetchStyle : LEGACY
[host] 2016-05-18 08:53:30.560 [7282ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:81) Default batch fetch size: -1
[host] 2016-05-18 08:53:30.560 [7282ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:82) Maximum outer join fetch depth: 2
[host] 2016-05-18 08:53:30.561 [7283ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:83) Default null ordering: NONE
[host] 2016-05-18 08:53:30.561 [7283ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:84) Order SQL updates by primary key: disabled
[host] 2016-05-18 08:53:30.561 [7283ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:85) Order SQL inserts for batching: disabled
[host] 2016-05-18 08:53:30.562 [7284ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:87) multi-tenancy strategy : NONE
[host] 2016-05-18 08:53:30.562 [7284ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:89) JTA Track by Thread: enabled
[host] 2016-05-18 08:53:30.562 [7284ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:91) Query language substitutions: {}
[host] 2016-05-18 08:53:30.562 [7284ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:92) JPA query language strict compliance: disabled
[host] 2016-05-18 08:53:30.563 [7285ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:93) Named query checking : enabled
[host] 2016-05-18 08:53:30.563 [7285ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:95) Second-level cache: enabled
[host] 2016-05-18 08:53:30.563 [7285ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:96) Second-level query cache: disabled
[host] 2016-05-18 08:53:30.564 [7286ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:97) Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@5a256b1
[host] 2016-05-18 08:53:30.564 [7286ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:98) Second-level cache region prefix: null
[host] 2016-05-18 08:53:30.564 [7286ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:99) Optimize second-level cache for minimal puts: disabled
[host] 2016-05-18 08:53:30.565 [7287ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:100) Structured second-level cache entries: disabled
[host] 2016-05-18 08:53:30.565 [7287ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:101) Second-level cache direct-reference entries: disabled
[host] 2016-05-18 08:53:30.566 [7288ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:102) Automatic eviction of collection cache: disabled
[host] 2016-05-18 08:53:30.566 [7288ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:104) JDBC batch size: 15
[host] 2016-05-18 08:53:30.566 [7288ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:105) JDBC batch updates for versioned data: enabled
[host] 2016-05-18 08:53:30.567 [7289ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:106) Scrollable result sets: enabled
[host] 2016-05-18 08:53:30.567 [7289ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:107) Wrap result sets: disabled
[host] 2016-05-18 08:53:30.567 [7289ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:108) JDBC3 getGeneratedKeys(): enabled
[host] 2016-05-18 08:53:30.568 [7290ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:109) JDBC result set fetch size: null
[host] 2016-05-18 08:53:30.568 [7290ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:110) Connection release mode: ON_CLOSE
[host] 2016-05-18 08:53:30.568 [7290ms] [DEBUG] [pool-1-thread-1] org.hibernate.cfg.Settings.<init>(Settings.java:111) Generate SQL with comments: disabled
[host] 2016-05-18 08:53:30.648 [7370ms] [DEBUG] [pool-1-thread-1] org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:253) Session factory constructed with filter configurations : {}
[host] 2016-05-18 08:53:30.649 [7371ms] [DEBUG] [pool-1-thread-1] org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:254) Instantiating session factory with properties: {java.vendor=Oracle Corporation, show_sql=true, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost:3306/test, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, hibernate.connection.characterEncoding=utf8, os.name=Mac OS X, hbm2ddl.auto=update, sun.boot.class.path=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre/classes, hibernate.current_session_context_class=thread, java.vm.specification.vendor=Oracle Corporation, java.runtime.version=1.7.0_80-b15, hibernate.cache.provider_class=org.hibernate.cache.internal.NoCacheProvider, user.name=shc, connection.driver_class=com.mysql.jdbc.Driver, hibernate.connection.useSSL=false, current_session_context_class=thread, user.language=zh, sun.boot.library.path=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre/lib, dialect=org.hibernate.dialect.MySQLDialect, java.version=1.7.0_80, user.timezone=Asia/Shanghai, sun.arch.data.model=64, http.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, java.endorsed.dirs=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre/lib/endorsed, sun.cpu.isalist=, sun.jnu.encoding=UTF-8, file.encoding.pkg=sun.io, java.specification.name=Java Platform API Specification, file.separator=/, java.class.version=51.0, user.country=CN, connection.url=jdbc:mysql://localhost:3306/test, java.home=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre, java.vm.info=mixed mode, os.version=10.11.4, connection.useSSL=false, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@735b1ce2, connection.useUnicode=true, path.separator=:, connection.password=123456, java.vm.version=24.80-b11, hibernate.connection.password=123456, java.awt.printerjob=sun.lwawt.macosx.CPrinterJob, sun.io.unicode.encoding=UnicodeBig, awt.toolkit=sun.lwawt.macosx.LWCToolkit, hibernate.connection.username=root, socksNonProxyHosts=local|*.local|169.254/16|*.169.254/16, ftp.nonProxyHosts=local|*.local|169.254/16|*.169.254/16, user.home=/Users/shc, java.specification.vendor=Oracle Corporation, hibernate.hbm2ddl.auto=update, java.library.path=/Users/shc/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., java.vendor.url=http://java.oracle.com/, hibernate.connection.driver_class=com.mysql.jdbc.Driver, connection.username=root, java.vm.vendor=Oracle Corporation, gopherProxySet=false, hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=com.shc.mifty.startup.Bootstrap, java.class.path=/Users/shc/Desktop/devspace/javaspace/mifty/target/classes:/Users/shc/Desktop/devspace/maven_repository/org/apache/thrift/libthrift/0.9.3/libthrift-0.9.3.jar:/Users/shc/Desktop/devspace/maven_repository/org/apache/httpcomponents/httpclient/4.4.1/httpclient-4.4.1.jar:/Users/shc/Desktop/devspace/maven_repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar:/Users/shc/Desktop/devspace/maven_repository/org/apache/httpcomponents/httpcore/4.4.1/httpcore-4.4.1.jar:/Users/shc/Desktop/devspace/maven_repository/com/google/code/gson/gson/2.6.2/gson-2.6.2.jar:/Users/shc/Desktop/devspace/maven_repository/org/hibernate/hibernate-core/5.1.0.Final/hibernate-core-5.1.0.Final.jar:/Users/shc/Desktop/devspace/maven_repository/org/jboss/logging/jboss-logging/3.3.0.Final/jboss-logging-3.3.0.Final.jar:/Users/shc/Desktop/devspace/maven_repository/org/hibernate/javax/persistence/hibernate-jpa-2.1-api/1.0.0.Final/hibernate-jpa-2.1-api-1.0.0.Final.jar:/Users/shc/Desktop/devspace/maven_repository/org/javassist/javassist/3.20.0-GA/javassist-3.20.0-GA.jar:/Users/shc/Desktop/devspace/maven_repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/Users/shc/Desktop/devspace/maven_repository/org/apache/geronimo/specs/geronimo-jta_1.1_spec/1.1.1/geronimo-jta_1.1_spec-1.1.1.jar:/Users/shc/Desktop/devspace/maven_repository/org/jboss/jandex/2.0.0.Final/jandex-2.0.0.Final.jar:/Users/shc/Desktop/devspace/maven_repository/com/fasterxml/classmate/1.3.0/classmate-1.3.0.jar:/Users/shc/Desktop/devspace/maven_repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:/Users/shc/Desktop/devspace/maven_repository/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar:/Users/shc/Desktop/devspace/maven_repository/org/hibernate/common/hibernate-commons-annotations/5.0.1.Final/hibernate-commons-annotations-5.0.1.Final.jar:/Users/shc/Desktop/devspace/maven_repository/mysql/mysql-connector-java/5.1.38/mysql-connector-java-5.1.38.jar:/Users/shc/Desktop/devspace/maven_repository/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.jar:/Users/shc/Desktop/devspace/maven_repository/org/slf4j/slf4j-log4j12/1.7.21/slf4j-log4j12-1.7.21.jar:/Users/shc/Desktop/devspace/maven_repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/Users/shc/Desktop/devspace/javaspace/crossing/target/classes:/Users/shc/Desktop/devspace/javaspace/crossing/lib/newsharp/mina-core-2.0.2.jar:/Users/shc/Desktop/devspace/javaspace/crossing/lib/newsharp/sharp-container-1.0.jar:/Users/shc/Desktop/devspace/javaspace/crossing/lib/newsharp/log4j-repackaged.jar:/Users/shc/Desktop/devspace/javaspace/crossing/lib/newsharp/sharp-container-example-1.0.jar:/Users/shc/Desktop/devspace/maven_repository/com/google/protobuf/protobuf-java/2.6.1/protobuf-java-2.6.1.jar:/Users/shc/Desktop/devspace/maven_repository/io/netty/netty-all/4.0.36.Final/netty-all-4.0.36.Final.jar:/Users/shc/Desktop/devspace/maven_repository/commons-configuration/commons-configuration/1.10/commons-configuration-1.10.jar:/Users/shc/Desktop/devspace/maven_repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/Users/shc/Desktop/devspace/maven_repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/Users/shc/Desktop/devspace/maven_repository/commons-codec/commons-codec/1.10/commons-codec-1.10.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.7, sun.cpu.endian=little, sun.os.patch.level=unknown, connection.pool_size=2, java.io.tmpdir=/var/folders/p6/yc3hvzns3x7csz6jk52w10380000gn/T/, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, os.arch=x86_64, java.awt.graphicsenv=sun.awt.CGraphicsEnvironment, java.ext.dirs=/Users/shc/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java, hibernate.connection.useUnicode=true, user.dir=/Users/shc/Desktop/devspace/javaspace/mifty, line.separator=
, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, cache.provider_class=org.hibernate.cache.internal.NoCacheProvider, file.encoding=UTF-8, connection.characterEncoding=utf8, java.specification.version=1.7, hibernate.show_sql=true, hibernate.connection.pool_size=2}
[host] 2016-05-18 08:53:30.668 [7390ms] [DEBUG] [pool-1-thread-1] org.hibernate.secure.spi.JaccIntegrator.doIntegration(JaccIntegrator.java:80) Skipping JACC integration as it was not enabled
[host] 2016-05-18 08:53:30.678 [7400ms] [DEBUG] [pool-1-thread-1] org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:449) Instantiated session factory
[host] 2016-05-18 08:53:30.721 [7443ms] [DEBUG] [pool-1-thread-1] org.hibernate.internal.NamedQueryRepository.checkNamedQueries(NamedQueryRepository.java:149) Checking 0 named HQL queries
[host] 2016-05-18 08:53:30.722 [7444ms] [DEBUG] [pool-1-thread-1] org.hibernate.internal.NamedQueryRepository.checkNamedQueries(NamedQueryRepository.java:165) Checking 0 named SQL queries
[host] 2016-05-18 08:53:30.726 [7448ms] [DEBUG] [pool-1-thread-1] org.hibernate.internal.SessionFactoryRegistry.<init>(SessionFactoryRegistry.java:52) Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@2dae9baf
[host] 2016-05-18 08:53:30.729 [7451ms] [DEBUG] [pool-1-thread-1] org.hibernate.internal.SessionFactoryRegistry.addSessionFactory(SessionFactoryRegistry.java:74) Registering SessionFactory: cf9ad145-7d50-4e6d-8845-eedf8cd73bc0 (<unnamed>)
[host] 2016-05-18 08:53:30.730 [7452ms] [DEBUG] [pool-1-thread-1] org.hibernate.internal.SessionFactoryRegistry.addSessionFactory(SessionFactoryRegistry.java:81) Not binding SessionFactory to JNDI, no JNDI name configured
[host] 2016-05-18 08:53:30.811 [7533ms] [DEBUG] [pool-1-thread-1] org.hibernate.stat.internal.StatisticsInitiator.initiateServiceInternal(StatisticsInitiator.java:82) Statistics initialized [enabled=false]
[host] 2016-05-18 08:53:30.815 [7537ms] [DEBUG] [pool-1-thread-1] org.hibernate.engine.transaction.internal.TransactionImpl.begin(TransactionImpl.java:51) begin
[host] 2016-05-18 08:53:30.830 [7552ms] [DEBUG] [pool-1-thread-1] org.hibernate.hql.internal.QueryTranslatorFactoryInitiator.initiateService(QueryTranslatorFactoryInitiator.java:45) QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@22ed101f
[host] 2016-05-18 08:53:30.831 [7553ms] [INFO] [pool-1-thread-1] org.hibernate.hql.internal.QueryTranslatorFactoryInitiator.initiateService(QueryTranslatorFactoryInitiator.java:47) HHH000397: Using ASTQueryTranslatorFactory
[host] 2016-05-18 08:53:30.892 [7614ms] [DEBUG] [pool-1-thread-1] org.hibernate.hql.internal.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:278) parse() - HQL: delete from test.user;
[host] 2016-05-18 08:53:30.900 [7622ms] [ERROR] [pool-1-thread-1] org.apache.thrift.server.TThreadPoolServer$WorkerProcess.run(TThreadPoolServer.java:297) Error occurred during processing of message.
org.hibernate.QueryException: unexpected char: ';' [delete from test.user;]
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:234)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:142)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:115)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:76)
	at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:150)
	at org.hibernate.internal.AbstractSessionImpl.getHQLQueryPlan(AbstractSessionImpl.java:302)
	at org.hibernate.internal.AbstractSessionImpl.createQuery(AbstractSessionImpl.java:240)
	at org.hibernate.internal.SessionImpl.createQuery(SessionImpl.java:1907)
	at com.shc.mifty.example.ExaServiceImpl.sayHello(ExaServiceImpl.java:67)
	at com.shc.mifty.example.ExaService$Processor$sayHello.getResult(ExaService.java:245)
	at com.shc.mifty.example.ExaService$Processor$sayHello.getResult(ExaService.java:1)
	at org.apache.thrift.ProcessFunction.process(ProcessFunction.java:39)
	at org.apache.thrift.TBaseProcessor.process(TBaseProcessor.java:39)
	at org.apache.thrift.TMultiplexedProcessor.process(TMultiplexedProcessor.java:123)
	at org.apache.thrift.server.TThreadPoolServer$WorkerProcess.run(TThreadPoolServer.java:286)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
